
bin\Debug\LIDAR_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000165  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000048  00000000  00000000  00000185  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000138  00000000  00000000  000001cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c9  00000000  00000000  00000305  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000010a  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ae  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Servo_Setup>:
#define SetBit(byte, bit)       (byte |= BV(bit))
#define ClearBit(byte, bit)     (byte &= ~BV(bit))
#define ToggleBit(byte, bit)    (byte ^= BV(bit))

void Servo_Setup(void)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
    //set fast PWM mode aan van timer1 met ICR1 als TOP waarde
    TCCR1A |= BV(WGM11);
  88:	a0 e8       	ldi	r26, 0x80	; 128
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e0 e8       	ldi	r30, 0x80	; 128
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	82 60       	ori	r24, 0x02	; 2
  94:	8c 93       	st	X, r24
    TCCR1A &= ~BV(WGM10);
  96:	a0 e8       	ldi	r26, 0x80	; 128
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e0 e8       	ldi	r30, 0x80	; 128
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	8c 93       	st	X, r24
    TCCR1B |= BV(WGM12) | BV(WGM13);
  a4:	a1 e8       	ldi	r26, 0x81	; 129
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e1 e8       	ldi	r30, 0x81	; 129
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	88 61       	ori	r24, 0x18	; 24
  b0:	8c 93       	st	X, r24

    //set Compare Output Mode van COM A
    TCCR1A |= BV(COM1A1);  //set OC0A pin laag op COM match en set OC0A pin hoog bij BOTTOM
  b2:	a0 e8       	ldi	r26, 0x80	; 128
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e0 e8       	ldi	r30, 0x80	; 128
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	8c 93       	st	X, r24


    //set clock snelheid op clk/8
    TCCR1B |= BV(CS11);
  c0:	a1 e8       	ldi	r26, 0x81	; 129
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e1 e8       	ldi	r30, 0x81	; 129
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	8c 93       	st	X, r24

    //set pulsfrequentie
    ICR1 = 40000; //20ms standaard voor servo pulsfrequentie
  ce:	e6 e8       	ldi	r30, 0x86	; 134
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	9c e9       	ldi	r25, 0x9C	; 156
  d6:	91 83       	std	Z+1, r25	; 0x01
  d8:	80 83       	st	Z, r24

}
  da:	cf 91       	pop	r28
  dc:	df 91       	pop	r29
  de:	08 95       	ret

000000e0 <main>:

int main(void)
{
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0x8>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
