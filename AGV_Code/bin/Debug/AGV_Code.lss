
bin\Debug\AGV_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000e72  00000f26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e72  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800108  00800108  00000f2e  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000c0  00000000  00000000  00000f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001b7  00000000  00000000  00000ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015e9  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b10  00000000  00000000  00002791  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3a  00000000  00000000  000032a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00003fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d8  00000000  00000000  00004484  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00004b5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a8 e0       	ldi	r26, 0x08	; 8
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 31       	cpi	r26, 0x14	; 20
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e2 e7       	ldi	r30, 0x72	; 114
  8c:	fe e0       	ldi	r31, 0x0E	; 14
  8e:	02 c0       	rjmp	.+4      	; 0x94 <.do_copy_data_start>

00000090 <.do_copy_data_loop>:
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0

00000094 <.do_copy_data_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <.do_copy_data_loop>
  9a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <main>
  9e:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <MapRange>:
volatile uint16_t ADC_waarde_2;
volatile uint16_t verschil_0;
volatile uint16_t verschil_2;

double MapRange(double X, double A1, double A2, double B1, double B2)
{
  a6:	af 92       	push	r10
  a8:	bf 92       	push	r11
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	64 97       	sbiw	r28, 0x14	; 20
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	f8 94       	cli
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	cd bf       	out	0x3d, r28	; 61
  ca:	6d 83       	std	Y+5, r22	; 0x05
  cc:	7e 83       	std	Y+6, r23	; 0x06
  ce:	8f 83       	std	Y+7, r24	; 0x07
  d0:	98 87       	std	Y+8, r25	; 0x08
  d2:	29 87       	std	Y+9, r18	; 0x09
  d4:	3a 87       	std	Y+10, r19	; 0x0a
  d6:	4b 87       	std	Y+11, r20	; 0x0b
  d8:	5c 87       	std	Y+12, r21	; 0x0c
  da:	ed 86       	std	Y+13, r14	; 0x0d
  dc:	fe 86       	std	Y+14, r15	; 0x0e
  de:	0f 87       	std	Y+15, r16	; 0x0f
  e0:	18 8b       	std	Y+16, r17	; 0x10
  e2:	a9 8a       	std	Y+17, r10	; 0x11
  e4:	ba 8a       	std	Y+18, r11	; 0x12
  e6:	cb 8a       	std	Y+19, r12	; 0x13
  e8:	dc 8a       	std	Y+20, r13	; 0x14
    double Y = B1 + (X-A1)*((B2-B1)/(A2-A1));
  ea:	6d 81       	ldd	r22, Y+5	; 0x05
  ec:	7e 81       	ldd	r23, Y+6	; 0x06
  ee:	8f 81       	ldd	r24, Y+7	; 0x07
  f0:	98 85       	ldd	r25, Y+8	; 0x08
  f2:	29 85       	ldd	r18, Y+9	; 0x09
  f4:	3a 85       	ldd	r19, Y+10	; 0x0a
  f6:	4b 85       	ldd	r20, Y+11	; 0x0b
  f8:	5c 85       	ldd	r21, Y+12	; 0x0c
  fa:	0e 94 af 03 	call	0x75e	; 0x75e <__subsf3>
  fe:	dc 01       	movw	r26, r24
 100:	cb 01       	movw	r24, r22
 102:	5c 01       	movw	r10, r24
 104:	6d 01       	movw	r12, r26
 106:	69 a1       	ldd	r22, Y+33	; 0x21
 108:	7a a1       	ldd	r23, Y+34	; 0x22
 10a:	8b a1       	ldd	r24, Y+35	; 0x23
 10c:	9c a1       	ldd	r25, Y+36	; 0x24
 10e:	29 89       	ldd	r18, Y+17	; 0x11
 110:	3a 89       	ldd	r19, Y+18	; 0x12
 112:	4b 89       	ldd	r20, Y+19	; 0x13
 114:	5c 89       	ldd	r21, Y+20	; 0x14
 116:	0e 94 af 03 	call	0x75e	; 0x75e <__subsf3>
 11a:	dc 01       	movw	r26, r24
 11c:	cb 01       	movw	r24, r22
 11e:	7c 01       	movw	r14, r24
 120:	8d 01       	movw	r16, r26
 122:	6d 85       	ldd	r22, Y+13	; 0x0d
 124:	7e 85       	ldd	r23, Y+14	; 0x0e
 126:	8f 85       	ldd	r24, Y+15	; 0x0f
 128:	98 89       	ldd	r25, Y+16	; 0x10
 12a:	29 85       	ldd	r18, Y+9	; 0x09
 12c:	3a 85       	ldd	r19, Y+10	; 0x0a
 12e:	4b 85       	ldd	r20, Y+11	; 0x0b
 130:	5c 85       	ldd	r21, Y+12	; 0x0c
 132:	0e 94 af 03 	call	0x75e	; 0x75e <__subsf3>
 136:	dc 01       	movw	r26, r24
 138:	cb 01       	movw	r24, r22
 13a:	9c 01       	movw	r18, r24
 13c:	ad 01       	movw	r20, r26
 13e:	c8 01       	movw	r24, r16
 140:	b7 01       	movw	r22, r14
 142:	0e 94 07 05 	call	0xa0e	; 0xa0e <__divsf3>
 146:	dc 01       	movw	r26, r24
 148:	cb 01       	movw	r24, r22
 14a:	9c 01       	movw	r18, r24
 14c:	ad 01       	movw	r20, r26
 14e:	c6 01       	movw	r24, r12
 150:	b5 01       	movw	r22, r10
 152:	0e 94 0d 04 	call	0x81a	; 0x81a <__mulsf3>
 156:	dc 01       	movw	r26, r24
 158:	cb 01       	movw	r24, r22
 15a:	bc 01       	movw	r22, r24
 15c:	cd 01       	movw	r24, r26
 15e:	29 89       	ldd	r18, Y+17	; 0x11
 160:	3a 89       	ldd	r19, Y+18	; 0x12
 162:	4b 89       	ldd	r20, Y+19	; 0x13
 164:	5c 89       	ldd	r21, Y+20	; 0x14
 166:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__addsf3>
 16a:	dc 01       	movw	r26, r24
 16c:	cb 01       	movw	r24, r22
 16e:	89 83       	std	Y+1, r24	; 0x01
 170:	9a 83       	std	Y+2, r25	; 0x02
 172:	ab 83       	std	Y+3, r26	; 0x03
 174:	bc 83       	std	Y+4, r27	; 0x04
    return Y;
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	9a 81       	ldd	r25, Y+2	; 0x02
 17a:	ab 81       	ldd	r26, Y+3	; 0x03
 17c:	bc 81       	ldd	r27, Y+4	; 0x04
}
 17e:	bc 01       	movw	r22, r24
 180:	cd 01       	movw	r24, r26
 182:	64 96       	adiw	r28, 0x14	; 20
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	cf 91       	pop	r28
 190:	df 91       	pop	r29
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	bf 90       	pop	r11
 1a0:	af 90       	pop	r10
 1a2:	08 95       	ret

000001a4 <init_timer>:

void init_timer(void)
{
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
    ///timmer settup voor stepper motor1
    ///gebruikt timer0 in CTC mode
    ///met snelheid tussen 70 als snelste en 100 als langzaamste

    TCCR0A  = BV(COM0A0) | BV(WGM01);
 1ac:	e4 e4       	ldi	r30, 0x44	; 68
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	82 e4       	ldi	r24, 0x42	; 66
 1b2:	80 83       	st	Z, r24
    TCCR0B  = BV(CS02);             // clk/256
 1b4:	e5 e4       	ldi	r30, 0x45	; 69
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	80 83       	st	Z, r24
    OCR0A   = 95;                   //start snelheid
 1bc:	e7 e4       	ldi	r30, 0x47	; 71
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	8f e5       	ldi	r24, 0x5F	; 95
 1c2:	80 83       	st	Z, r24
    SetBit(DDRD, PD6);              //enable output timer D6
 1c4:	aa e2       	ldi	r26, 0x2A	; 42
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	ea e2       	ldi	r30, 0x2A	; 42
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	8c 93       	st	X, r24

    ///timmer settup voor stepper motor2
    ///gebruikt timer2 in CTC mode
    ///met snelheid tussen 70 als snelste en 100 als langzaamste

    TCCR2A  = BV(COM2A0) | BV(WGM21);
 1d2:	e0 eb       	ldi	r30, 0xB0	; 176
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	82 e4       	ldi	r24, 0x42	; 66
 1d8:	80 83       	st	Z, r24
    ClearBit(ASSR, AS2);             // interne io klok geselecteerd
 1da:	a6 eb       	ldi	r26, 0xB6	; 182
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	e6 eb       	ldi	r30, 0xB6	; 182
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8f 7d       	andi	r24, 0xDF	; 223
 1e6:	8c 93       	st	X, r24
    TCCR2B  = BV(CS22) | BV(CS21);   // clk/256
 1e8:	e1 eb       	ldi	r30, 0xB1	; 177
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	86 e0       	ldi	r24, 0x06	; 6
 1ee:	80 83       	st	Z, r24
    OCR2A   = 95;                    // start snelheid
 1f0:	e3 eb       	ldi	r30, 0xB3	; 179
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	8f e5       	ldi	r24, 0x5F	; 95
 1f6:	80 83       	st	Z, r24
    SetBit(DDRB, PB3);               // enable output timer D11
 1f8:	a4 e2       	ldi	r26, 0x24	; 36
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e4 e2       	ldi	r30, 0x24	; 36
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	88 60       	ori	r24, 0x08	; 8
 204:	8c 93       	st	X, r24
}
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <init_adc>:

void init_adc(void)
{
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
    ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // Prescaler 128 125kHZ
 214:	ea e7       	ldi	r30, 0x7A	; 122
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	87 e0       	ldi	r24, 0x07	; 7
 21a:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN);                                  // Aanzetten ADC
 21c:	aa e7       	ldi	r26, 0x7A	; 122
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	ea e7       	ldi	r30, 0x7A	; 122
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 68       	ori	r24, 0x80	; 128
 228:	8c 93       	st	X, r24


    // Waarde 1 genereren
    ADMUX &= ~(1 << MUX0);                          // ADC op poort 0
 22a:	ac e7       	ldi	r26, 0x7C	; 124
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	ec e7       	ldi	r30, 0x7C	; 124
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8e 7f       	andi	r24, 0xFE	; 254
 236:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADSC);                          // Conversatie starten
 238:	aa e7       	ldi	r26, 0x7A	; 122
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	ea e7       	ldi	r30, 0x7A	; 122
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	80 64       	ori	r24, 0x40	; 64
 244:	8c 93       	st	X, r24
    while (ADCSRA & (1 << ADSC));{}                 // Wacht tot conversatie klaar is
 246:	ea e7       	ldi	r30, 0x7A	; 122
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	80 74       	andi	r24, 0x40	; 64
 24e:	88 23       	and	r24, r24
 250:	d1 f7       	brne	.-12     	; 0x246 <init_adc+0x3a>
    POT0_BEGIN = ADC;                               // Waarde meegeven aan variabele
 252:	e8 e7       	ldi	r30, 0x78	; 120
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	91 81       	ldd	r25, Z+1	; 0x01
 25a:	90 93 0b 01 	sts	0x010B, r25
 25e:	80 93 0a 01 	sts	0x010A, r24


    // Waarde 2 genereren
    ADMUX |= (1 << MUX0);                           // ADC op poort 1
 262:	ac e7       	ldi	r26, 0x7C	; 124
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	ec e7       	ldi	r30, 0x7C	; 124
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADSC);                          // Conversatie starten
 270:	aa e7       	ldi	r26, 0x7A	; 122
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	ea e7       	ldi	r30, 0x7A	; 122
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	8c 93       	st	X, r24
    while (ADCSRA & (1 << ADSC));{}                 // Wacht tot conversatie klaar is
 27e:	ea e7       	ldi	r30, 0x7A	; 122
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	80 74       	andi	r24, 0x40	; 64
 286:	88 23       	and	r24, r24
 288:	d1 f7       	brne	.-12     	; 0x27e <init_adc+0x72>
    POT2_BEGIN = ADC;                             // Waarde meegeven aan variabele
 28a:	e8 e7       	ldi	r30, 0x78	; 120
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	91 81       	ldd	r25, Z+1	; 0x01
 292:	90 93 13 01 	sts	0x0113, r25
 296:	80 93 12 01 	sts	0x0112, r24



}
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <ADC_Check>:

void ADC_Check(void)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
    ADMUX &= ~(1 << MUX0);                          // ADC op poort 0
 2a8:	ac e7       	ldi	r26, 0x7C	; 124
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	ec e7       	ldi	r30, 0x7C	; 124
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	8e 7f       	andi	r24, 0xFE	; 254
 2b4:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADSC);                          // Conversatie starten
 2b6:	aa e7       	ldi	r26, 0x7A	; 122
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	ea e7       	ldi	r30, 0x7A	; 122
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	80 64       	ori	r24, 0x40	; 64
 2c2:	8c 93       	st	X, r24
    while (ADCSRA & (1 << ADSC));{}                 // Wacht tot conversatie klaar is
 2c4:	ea e7       	ldi	r30, 0x7A	; 122
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	80 74       	andi	r24, 0x40	; 64
 2cc:	88 23       	and	r24, r24
 2ce:	d1 f7       	brne	.-12     	; 0x2c4 <ADC_Check+0x24>

    ADC_waarde_0 = ADC;                               // Waarde meegeven aan variabele
 2d0:	e8 e7       	ldi	r30, 0x78	; 120
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	91 81       	ldd	r25, Z+1	; 0x01
 2d8:	90 93 0f 01 	sts	0x010F, r25
 2dc:	80 93 0e 01 	sts	0x010E, r24



    // Waarde 2 genereren
    ADMUX |= (1 << MUX0);                           // ADC op poort 1
 2e0:	ac e7       	ldi	r26, 0x7C	; 124
 2e2:	b0 e0       	ldi	r27, 0x00	; 0
 2e4:	ec e7       	ldi	r30, 0x7C	; 124
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADSC);                          // Conversatie starten
 2ee:	aa e7       	ldi	r26, 0x7A	; 122
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	ea e7       	ldi	r30, 0x7A	; 122
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	80 64       	ori	r24, 0x40	; 64
 2fa:	8c 93       	st	X, r24
    while (ADCSRA & (1 << ADSC));{}                 // Wacht tot conversatie klaar is
 2fc:	ea e7       	ldi	r30, 0x7A	; 122
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	80 74       	andi	r24, 0x40	; 64
 304:	88 23       	and	r24, r24
 306:	d1 f7       	brne	.-12     	; 0x2fc <ADC_Check+0x5c>
    ADC_waarde_2 = ADC;                             // Waarde meegeven aan variabele
 308:	e8 e7       	ldi	r30, 0x78	; 120
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	91 81       	ldd	r25, Z+1	; 0x01
 310:	90 93 09 01 	sts	0x0109, r25
 314:	80 93 08 01 	sts	0x0108, r24
}
 318:	cf 91       	pop	r28
 31a:	df 91       	pop	r29
 31c:	08 95       	ret

0000031e <Navigeer>:




void Navigeer(void)
{
 31e:	df 93       	push	r29
 320:	cf 93       	push	r28
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62

    ///links
    if((POT2_BEGIN > ADC_waarde_2) && (POT0_BEGIN < ADC_waarde_0))
 326:	20 91 12 01 	lds	r18, 0x0112
 32a:	30 91 13 01 	lds	r19, 0x0113
 32e:	80 91 08 01 	lds	r24, 0x0108
 332:	90 91 09 01 	lds	r25, 0x0109
 336:	82 17       	cp	r24, r18
 338:	93 07       	cpc	r25, r19
 33a:	08 f0       	brcs	.+2      	; 0x33e <Navigeer+0x20>
 33c:	88 c0       	rjmp	.+272    	; 0x44e <Navigeer+0x130>
 33e:	20 91 0a 01 	lds	r18, 0x010A
 342:	30 91 0b 01 	lds	r19, 0x010B
 346:	80 91 0e 01 	lds	r24, 0x010E
 34a:	90 91 0f 01 	lds	r25, 0x010F
 34e:	28 17       	cp	r18, r24
 350:	39 07       	cpc	r19, r25
 352:	08 f0       	brcs	.+2      	; 0x356 <Navigeer+0x38>
 354:	7c c0       	rjmp	.+248    	; 0x44e <Navigeer+0x130>
    {
        verschil_2 = POT2_BEGIN - ADC_waarde_2;
 356:	20 91 12 01 	lds	r18, 0x0112
 35a:	30 91 13 01 	lds	r19, 0x0113
 35e:	80 91 08 01 	lds	r24, 0x0108
 362:	90 91 09 01 	lds	r25, 0x0109
 366:	a9 01       	movw	r20, r18
 368:	48 1b       	sub	r20, r24
 36a:	59 0b       	sbc	r21, r25
 36c:	ca 01       	movw	r24, r20
 36e:	90 93 11 01 	sts	0x0111, r25
 372:	80 93 10 01 	sts	0x0110, r24
		verschil_0 = ADC_waarde_0 - POT0_BEGIN;
 376:	20 91 0e 01 	lds	r18, 0x010E
 37a:	30 91 0f 01 	lds	r19, 0x010F
 37e:	80 91 0a 01 	lds	r24, 0x010A
 382:	90 91 0b 01 	lds	r25, 0x010B
 386:	a9 01       	movw	r20, r18
 388:	48 1b       	sub	r20, r24
 38a:	59 0b       	sbc	r21, r25
 38c:	ca 01       	movw	r24, r20
 38e:	90 93 0d 01 	sts	0x010D, r25
 392:	80 93 0c 01 	sts	0x010C, r24

        if(verschil_0 > verschil_2)
 396:	20 91 0c 01 	lds	r18, 0x010C
 39a:	30 91 0d 01 	lds	r19, 0x010D
 39e:	80 91 10 01 	lds	r24, 0x0110
 3a2:	90 91 11 01 	lds	r25, 0x0111
 3a6:	82 17       	cp	r24, r18
 3a8:	93 07       	cpc	r25, r19
 3aa:	48 f5       	brcc	.+82     	; 0x3fe <Navigeer+0xe0>
        {
            if((verschil_0 - verschil_2) >= 20)
 3ac:	80 91 0c 01 	lds	r24, 0x010C
 3b0:	90 91 0d 01 	lds	r25, 0x010D
 3b4:	20 91 10 01 	lds	r18, 0x0110
 3b8:	30 91 11 01 	lds	r19, 0x0111
 3bc:	82 1b       	sub	r24, r18
 3be:	93 0b       	sbc	r25, r19
 3c0:	84 31       	cpi	r24, 0x14	; 20
 3c2:	91 05       	cpc	r25, r1
 3c4:	60 f0       	brcs	.+24     	; 0x3de <Navigeer+0xc0>
            {
                OCR0A = 95 ;
 3c6:	e7 e4       	ldi	r30, 0x47	; 71
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	8f e5       	ldi	r24, 0x5F	; 95
 3cc:	80 83       	st	Z, r24
                ClearBit(DDRB, PB3);               // disable output timer D11
 3ce:	a4 e2       	ldi	r26, 0x24	; 36
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e4 e2       	ldi	r30, 0x24	; 36
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	87 7f       	andi	r24, 0xF7	; 247
 3da:	8c 93       	st	X, r24
 3dc:	38 c0       	rjmp	.+112    	; 0x44e <Navigeer+0x130>
            }
            else
            {
                SetBit(DDRB, PB3);               // enable output timer D11
 3de:	a4 e2       	ldi	r26, 0x24	; 36
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e4 e2       	ldi	r30, 0x24	; 36
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	88 60       	ori	r24, 0x08	; 8
 3ea:	8c 93       	st	X, r24
                OCR0A = 95 ;
 3ec:	e7 e4       	ldi	r30, 0x47	; 71
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	8f e5       	ldi	r24, 0x5F	; 95
 3f2:	80 83       	st	Z, r24
                OCR2A = 95 ;
 3f4:	e3 eb       	ldi	r30, 0xB3	; 179
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	8f e5       	ldi	r24, 0x5F	; 95
 3fa:	80 83       	st	Z, r24
 3fc:	28 c0       	rjmp	.+80     	; 0x44e <Navigeer+0x130>
            }

        }
        else
        {
            if((verschil_2 - verschil_0) >= 20)
 3fe:	80 91 10 01 	lds	r24, 0x0110
 402:	90 91 11 01 	lds	r25, 0x0111
 406:	20 91 0c 01 	lds	r18, 0x010C
 40a:	30 91 0d 01 	lds	r19, 0x010D
 40e:	82 1b       	sub	r24, r18
 410:	93 0b       	sbc	r25, r19
 412:	84 31       	cpi	r24, 0x14	; 20
 414:	91 05       	cpc	r25, r1
 416:	60 f0       	brcs	.+24     	; 0x430 <Navigeer+0x112>
            {
                ClearBit(DDRD, PD6);              //disable output timer D6
 418:	aa e2       	ldi	r26, 0x2A	; 42
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	ea e2       	ldi	r30, 0x2A	; 42
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	8f 7b       	andi	r24, 0xBF	; 191
 424:	8c 93       	st	X, r24
                OCR2A = 95 ;
 426:	e3 eb       	ldi	r30, 0xB3	; 179
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	8f e5       	ldi	r24, 0x5F	; 95
 42c:	80 83       	st	Z, r24
 42e:	0f c0       	rjmp	.+30     	; 0x44e <Navigeer+0x130>
            }
            else
            {
                SetBit(DDRD, PD6);              //enable output timer D6
 430:	aa e2       	ldi	r26, 0x2A	; 42
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	ea e2       	ldi	r30, 0x2A	; 42
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	80 64       	ori	r24, 0x40	; 64
 43c:	8c 93       	st	X, r24

                OCR0A = 95 ;
 43e:	e7 e4       	ldi	r30, 0x47	; 71
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	8f e5       	ldi	r24, 0x5F	; 95
 444:	80 83       	st	Z, r24
                OCR2A = 95 ;
 446:	e3 eb       	ldi	r30, 0xB3	; 179
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	8f e5       	ldi	r24, 0x5F	; 95
 44c:	80 83       	st	Z, r24
            }


        }
    }
}
 44e:	cf 91       	pop	r28
 450:	df 91       	pop	r29
 452:	08 95       	ret

00000454 <Bocht_Rechts>:

bool Bocht_Rechts(void)
{
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	00 d0       	rcall	.+0      	; 0x45a <Bocht_Rechts+0x6>
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
    ///maak een bocht met 90 graden naar rechts
    bool Toggle_check;
    int Step_Count;

    ClearBit(DDRB, PB3);               // disable output timer D11
 45e:	a4 e2       	ldi	r26, 0x24	; 36
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e4 e2       	ldi	r30, 0x24	; 36
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	87 7f       	andi	r24, 0xF7	; 247
 46a:	8c 93       	st	X, r24
    do
    {
        if(bit_is_set(PINB, PB3))
 46c:	e3 e2       	ldi	r30, 0x23	; 35
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	88 70       	andi	r24, 0x08	; 8
 474:	88 23       	and	r24, r24
 476:	59 f0       	breq	.+22     	; 0x48e <Bocht_Rechts+0x3a>
        {
            if(!Toggle_check)
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	89 27       	eor	r24, r25
 47e:	88 23       	and	r24, r24
 480:	39 f0       	breq	.+14     	; 0x490 <Bocht_Rechts+0x3c>
            {
            Toggle_check = true;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	8a 83       	std	Y+2, r24	; 0x02
            Step_Count++;
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	8f 5f       	subi	r24, 0xFF	; 255
 48a:	89 83       	std	Y+1, r24	; 0x01
 48c:	01 c0       	rjmp	.+2      	; 0x490 <Bocht_Rechts+0x3c>
            }
        }
        else
        {
            Toggle_check = false;
 48e:	1a 82       	std	Y+2, r1	; 0x02
        }

    }while(Step_Count < 50);
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	82 33       	cpi	r24, 0x32	; 50
 494:	5c f3       	brlt	.-42     	; 0x46c <Bocht_Rechts+0x18>

    SetBit(DDRB, PB3);               // enable output timer D11
 496:	a4 e2       	ldi	r26, 0x24	; 36
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	e4 e2       	ldi	r30, 0x24	; 36
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	88 60       	ori	r24, 0x08	; 8
 4a2:	8c 93       	st	X, r24
    return(true);
 4a4:	81 e0       	ldi	r24, 0x01	; 1
}
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	cf 91       	pop	r28
 4ac:	df 91       	pop	r29
 4ae:	08 95       	ret

000004b0 <main>:

int main(void)
{
 4b0:	df 93       	push	r29
 4b2:	cf 93       	push	r28
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
    init_timer();
 4b8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <init_timer>
    init_adc();
 4bc:	0e 94 06 01 	call	0x20c	; 0x20c <init_adc>


    // Insert code

    while(1)
        ADC_Check();
 4c0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ADC_Check>
 4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <main+0x10>

000004c6 <_fpadd_parts>:
 4c6:	a0 e0       	ldi	r26, 0x00	; 0
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e9 e6       	ldi	r30, 0x69	; 105
 4cc:	f2 e0       	ldi	r31, 0x02	; 2
 4ce:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__prologue_saves__>
 4d2:	dc 01       	movw	r26, r24
 4d4:	2b 01       	movw	r4, r22
 4d6:	fa 01       	movw	r30, r20
 4d8:	9c 91       	ld	r25, X
 4da:	92 30       	cpi	r25, 0x02	; 2
 4dc:	08 f4       	brcc	.+2      	; 0x4e0 <_fpadd_parts+0x1a>
 4de:	39 c1       	rjmp	.+626    	; 0x752 <_fpadd_parts+0x28c>
 4e0:	eb 01       	movw	r28, r22
 4e2:	88 81       	ld	r24, Y
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	08 f4       	brcc	.+2      	; 0x4ea <_fpadd_parts+0x24>
 4e8:	33 c1       	rjmp	.+614    	; 0x750 <_fpadd_parts+0x28a>
 4ea:	94 30       	cpi	r25, 0x04	; 4
 4ec:	69 f4       	brne	.+26     	; 0x508 <_fpadd_parts+0x42>
 4ee:	84 30       	cpi	r24, 0x04	; 4
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <_fpadd_parts+0x2e>
 4f2:	2f c1       	rjmp	.+606    	; 0x752 <_fpadd_parts+0x28c>
 4f4:	11 96       	adiw	r26, 0x01	; 1
 4f6:	9c 91       	ld	r25, X
 4f8:	11 97       	sbiw	r26, 0x01	; 1
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	98 17       	cp	r25, r24
 4fe:	09 f4       	brne	.+2      	; 0x502 <_fpadd_parts+0x3c>
 500:	28 c1       	rjmp	.+592    	; 0x752 <_fpadd_parts+0x28c>
 502:	a0 e0       	ldi	r26, 0x00	; 0
 504:	b1 e0       	ldi	r27, 0x01	; 1
 506:	25 c1       	rjmp	.+586    	; 0x752 <_fpadd_parts+0x28c>
 508:	84 30       	cpi	r24, 0x04	; 4
 50a:	09 f4       	brne	.+2      	; 0x50e <_fpadd_parts+0x48>
 50c:	21 c1       	rjmp	.+578    	; 0x750 <_fpadd_parts+0x28a>
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	a9 f4       	brne	.+42     	; 0x53c <_fpadd_parts+0x76>
 512:	92 30       	cpi	r25, 0x02	; 2
 514:	09 f0       	breq	.+2      	; 0x518 <_fpadd_parts+0x52>
 516:	1d c1       	rjmp	.+570    	; 0x752 <_fpadd_parts+0x28c>
 518:	9a 01       	movw	r18, r20
 51a:	ad 01       	movw	r20, r26
 51c:	88 e0       	ldi	r24, 0x08	; 8
 51e:	ea 01       	movw	r28, r20
 520:	09 90       	ld	r0, Y+
 522:	ae 01       	movw	r20, r28
 524:	e9 01       	movw	r28, r18
 526:	09 92       	st	Y+, r0
 528:	9e 01       	movw	r18, r28
 52a:	81 50       	subi	r24, 0x01	; 1
 52c:	c1 f7       	brne	.-16     	; 0x51e <_fpadd_parts+0x58>
 52e:	e2 01       	movw	r28, r4
 530:	89 81       	ldd	r24, Y+1	; 0x01
 532:	11 96       	adiw	r26, 0x01	; 1
 534:	9c 91       	ld	r25, X
 536:	89 23       	and	r24, r25
 538:	81 83       	std	Z+1, r24	; 0x01
 53a:	08 c1       	rjmp	.+528    	; 0x74c <_fpadd_parts+0x286>
 53c:	92 30       	cpi	r25, 0x02	; 2
 53e:	09 f4       	brne	.+2      	; 0x542 <_fpadd_parts+0x7c>
 540:	07 c1       	rjmp	.+526    	; 0x750 <_fpadd_parts+0x28a>
 542:	12 96       	adiw	r26, 0x02	; 2
 544:	2d 90       	ld	r2, X+
 546:	3c 90       	ld	r3, X
 548:	13 97       	sbiw	r26, 0x03	; 3
 54a:	eb 01       	movw	r28, r22
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	9b 81       	ldd	r25, Y+3	; 0x03
 550:	14 96       	adiw	r26, 0x04	; 4
 552:	ad 90       	ld	r10, X+
 554:	bd 90       	ld	r11, X+
 556:	cd 90       	ld	r12, X+
 558:	dc 90       	ld	r13, X
 55a:	17 97       	sbiw	r26, 0x07	; 7
 55c:	ec 80       	ldd	r14, Y+4	; 0x04
 55e:	fd 80       	ldd	r15, Y+5	; 0x05
 560:	0e 81       	ldd	r16, Y+6	; 0x06
 562:	1f 81       	ldd	r17, Y+7	; 0x07
 564:	91 01       	movw	r18, r2
 566:	28 1b       	sub	r18, r24
 568:	39 0b       	sbc	r19, r25
 56a:	b9 01       	movw	r22, r18
 56c:	37 ff       	sbrs	r19, 7
 56e:	04 c0       	rjmp	.+8      	; 0x578 <_fpadd_parts+0xb2>
 570:	66 27       	eor	r22, r22
 572:	77 27       	eor	r23, r23
 574:	62 1b       	sub	r22, r18
 576:	73 0b       	sbc	r23, r19
 578:	60 32       	cpi	r22, 0x20	; 32
 57a:	71 05       	cpc	r23, r1
 57c:	0c f0       	brlt	.+2      	; 0x580 <_fpadd_parts+0xba>
 57e:	61 c0       	rjmp	.+194    	; 0x642 <_fpadd_parts+0x17c>
 580:	12 16       	cp	r1, r18
 582:	13 06       	cpc	r1, r19
 584:	6c f5       	brge	.+90     	; 0x5e0 <_fpadd_parts+0x11a>
 586:	37 01       	movw	r6, r14
 588:	48 01       	movw	r8, r16
 58a:	06 2e       	mov	r0, r22
 58c:	04 c0       	rjmp	.+8      	; 0x596 <_fpadd_parts+0xd0>
 58e:	96 94       	lsr	r9
 590:	87 94       	ror	r8
 592:	77 94       	ror	r7
 594:	67 94       	ror	r6
 596:	0a 94       	dec	r0
 598:	d2 f7       	brpl	.-12     	; 0x58e <_fpadd_parts+0xc8>
 59a:	21 e0       	ldi	r18, 0x01	; 1
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	04 c0       	rjmp	.+8      	; 0x5ac <_fpadd_parts+0xe6>
 5a4:	22 0f       	add	r18, r18
 5a6:	33 1f       	adc	r19, r19
 5a8:	44 1f       	adc	r20, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	6a 95       	dec	r22
 5ae:	d2 f7       	brpl	.-12     	; 0x5a4 <_fpadd_parts+0xde>
 5b0:	21 50       	subi	r18, 0x01	; 1
 5b2:	30 40       	sbci	r19, 0x00	; 0
 5b4:	40 40       	sbci	r20, 0x00	; 0
 5b6:	50 40       	sbci	r21, 0x00	; 0
 5b8:	2e 21       	and	r18, r14
 5ba:	3f 21       	and	r19, r15
 5bc:	40 23       	and	r20, r16
 5be:	51 23       	and	r21, r17
 5c0:	21 15       	cp	r18, r1
 5c2:	31 05       	cpc	r19, r1
 5c4:	41 05       	cpc	r20, r1
 5c6:	51 05       	cpc	r21, r1
 5c8:	21 f0       	breq	.+8      	; 0x5d2 <_fpadd_parts+0x10c>
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	40 e0       	ldi	r20, 0x00	; 0
 5d0:	50 e0       	ldi	r21, 0x00	; 0
 5d2:	79 01       	movw	r14, r18
 5d4:	8a 01       	movw	r16, r20
 5d6:	e6 28       	or	r14, r6
 5d8:	f7 28       	or	r15, r7
 5da:	08 29       	or	r16, r8
 5dc:	19 29       	or	r17, r9
 5de:	3c c0       	rjmp	.+120    	; 0x658 <_fpadd_parts+0x192>
 5e0:	23 2b       	or	r18, r19
 5e2:	d1 f1       	breq	.+116    	; 0x658 <_fpadd_parts+0x192>
 5e4:	26 0e       	add	r2, r22
 5e6:	37 1e       	adc	r3, r23
 5e8:	35 01       	movw	r6, r10
 5ea:	46 01       	movw	r8, r12
 5ec:	06 2e       	mov	r0, r22
 5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <_fpadd_parts+0x132>
 5f0:	96 94       	lsr	r9
 5f2:	87 94       	ror	r8
 5f4:	77 94       	ror	r7
 5f6:	67 94       	ror	r6
 5f8:	0a 94       	dec	r0
 5fa:	d2 f7       	brpl	.-12     	; 0x5f0 <_fpadd_parts+0x12a>
 5fc:	21 e0       	ldi	r18, 0x01	; 1
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	50 e0       	ldi	r21, 0x00	; 0
 604:	04 c0       	rjmp	.+8      	; 0x60e <_fpadd_parts+0x148>
 606:	22 0f       	add	r18, r18
 608:	33 1f       	adc	r19, r19
 60a:	44 1f       	adc	r20, r20
 60c:	55 1f       	adc	r21, r21
 60e:	6a 95       	dec	r22
 610:	d2 f7       	brpl	.-12     	; 0x606 <_fpadd_parts+0x140>
 612:	21 50       	subi	r18, 0x01	; 1
 614:	30 40       	sbci	r19, 0x00	; 0
 616:	40 40       	sbci	r20, 0x00	; 0
 618:	50 40       	sbci	r21, 0x00	; 0
 61a:	2a 21       	and	r18, r10
 61c:	3b 21       	and	r19, r11
 61e:	4c 21       	and	r20, r12
 620:	5d 21       	and	r21, r13
 622:	21 15       	cp	r18, r1
 624:	31 05       	cpc	r19, r1
 626:	41 05       	cpc	r20, r1
 628:	51 05       	cpc	r21, r1
 62a:	21 f0       	breq	.+8      	; 0x634 <_fpadd_parts+0x16e>
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	50 e0       	ldi	r21, 0x00	; 0
 634:	59 01       	movw	r10, r18
 636:	6a 01       	movw	r12, r20
 638:	a6 28       	or	r10, r6
 63a:	b7 28       	or	r11, r7
 63c:	c8 28       	or	r12, r8
 63e:	d9 28       	or	r13, r9
 640:	0b c0       	rjmp	.+22     	; 0x658 <_fpadd_parts+0x192>
 642:	82 15       	cp	r24, r2
 644:	93 05       	cpc	r25, r3
 646:	2c f0       	brlt	.+10     	; 0x652 <_fpadd_parts+0x18c>
 648:	1c 01       	movw	r2, r24
 64a:	aa 24       	eor	r10, r10
 64c:	bb 24       	eor	r11, r11
 64e:	65 01       	movw	r12, r10
 650:	03 c0       	rjmp	.+6      	; 0x658 <_fpadd_parts+0x192>
 652:	ee 24       	eor	r14, r14
 654:	ff 24       	eor	r15, r15
 656:	87 01       	movw	r16, r14
 658:	11 96       	adiw	r26, 0x01	; 1
 65a:	9c 91       	ld	r25, X
 65c:	d2 01       	movw	r26, r4
 65e:	11 96       	adiw	r26, 0x01	; 1
 660:	8c 91       	ld	r24, X
 662:	98 17       	cp	r25, r24
 664:	09 f4       	brne	.+2      	; 0x668 <_fpadd_parts+0x1a2>
 666:	45 c0       	rjmp	.+138    	; 0x6f2 <_fpadd_parts+0x22c>
 668:	99 23       	and	r25, r25
 66a:	39 f0       	breq	.+14     	; 0x67a <_fpadd_parts+0x1b4>
 66c:	a8 01       	movw	r20, r16
 66e:	97 01       	movw	r18, r14
 670:	2a 19       	sub	r18, r10
 672:	3b 09       	sbc	r19, r11
 674:	4c 09       	sbc	r20, r12
 676:	5d 09       	sbc	r21, r13
 678:	06 c0       	rjmp	.+12     	; 0x686 <_fpadd_parts+0x1c0>
 67a:	a6 01       	movw	r20, r12
 67c:	95 01       	movw	r18, r10
 67e:	2e 19       	sub	r18, r14
 680:	3f 09       	sbc	r19, r15
 682:	40 0b       	sbc	r20, r16
 684:	51 0b       	sbc	r21, r17
 686:	57 fd       	sbrc	r21, 7
 688:	08 c0       	rjmp	.+16     	; 0x69a <_fpadd_parts+0x1d4>
 68a:	11 82       	std	Z+1, r1	; 0x01
 68c:	33 82       	std	Z+3, r3	; 0x03
 68e:	22 82       	std	Z+2, r2	; 0x02
 690:	24 83       	std	Z+4, r18	; 0x04
 692:	35 83       	std	Z+5, r19	; 0x05
 694:	46 83       	std	Z+6, r20	; 0x06
 696:	57 83       	std	Z+7, r21	; 0x07
 698:	1d c0       	rjmp	.+58     	; 0x6d4 <_fpadd_parts+0x20e>
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	81 83       	std	Z+1, r24	; 0x01
 69e:	33 82       	std	Z+3, r3	; 0x03
 6a0:	22 82       	std	Z+2, r2	; 0x02
 6a2:	88 27       	eor	r24, r24
 6a4:	99 27       	eor	r25, r25
 6a6:	dc 01       	movw	r26, r24
 6a8:	82 1b       	sub	r24, r18
 6aa:	93 0b       	sbc	r25, r19
 6ac:	a4 0b       	sbc	r26, r20
 6ae:	b5 0b       	sbc	r27, r21
 6b0:	84 83       	std	Z+4, r24	; 0x04
 6b2:	95 83       	std	Z+5, r25	; 0x05
 6b4:	a6 83       	std	Z+6, r26	; 0x06
 6b6:	b7 83       	std	Z+7, r27	; 0x07
 6b8:	0d c0       	rjmp	.+26     	; 0x6d4 <_fpadd_parts+0x20e>
 6ba:	22 0f       	add	r18, r18
 6bc:	33 1f       	adc	r19, r19
 6be:	44 1f       	adc	r20, r20
 6c0:	55 1f       	adc	r21, r21
 6c2:	24 83       	std	Z+4, r18	; 0x04
 6c4:	35 83       	std	Z+5, r19	; 0x05
 6c6:	46 83       	std	Z+6, r20	; 0x06
 6c8:	57 83       	std	Z+7, r21	; 0x07
 6ca:	82 81       	ldd	r24, Z+2	; 0x02
 6cc:	93 81       	ldd	r25, Z+3	; 0x03
 6ce:	01 97       	sbiw	r24, 0x01	; 1
 6d0:	93 83       	std	Z+3, r25	; 0x03
 6d2:	82 83       	std	Z+2, r24	; 0x02
 6d4:	24 81       	ldd	r18, Z+4	; 0x04
 6d6:	35 81       	ldd	r19, Z+5	; 0x05
 6d8:	46 81       	ldd	r20, Z+6	; 0x06
 6da:	57 81       	ldd	r21, Z+7	; 0x07
 6dc:	da 01       	movw	r26, r20
 6de:	c9 01       	movw	r24, r18
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	a1 09       	sbc	r26, r1
 6e4:	b1 09       	sbc	r27, r1
 6e6:	8f 5f       	subi	r24, 0xFF	; 255
 6e8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ea:	af 4f       	sbci	r26, 0xFF	; 255
 6ec:	bf 43       	sbci	r27, 0x3F	; 63
 6ee:	28 f3       	brcs	.-54     	; 0x6ba <_fpadd_parts+0x1f4>
 6f0:	0b c0       	rjmp	.+22     	; 0x708 <_fpadd_parts+0x242>
 6f2:	91 83       	std	Z+1, r25	; 0x01
 6f4:	33 82       	std	Z+3, r3	; 0x03
 6f6:	22 82       	std	Z+2, r2	; 0x02
 6f8:	ea 0c       	add	r14, r10
 6fa:	fb 1c       	adc	r15, r11
 6fc:	0c 1d       	adc	r16, r12
 6fe:	1d 1d       	adc	r17, r13
 700:	e4 82       	std	Z+4, r14	; 0x04
 702:	f5 82       	std	Z+5, r15	; 0x05
 704:	06 83       	std	Z+6, r16	; 0x06
 706:	17 83       	std	Z+7, r17	; 0x07
 708:	83 e0       	ldi	r24, 0x03	; 3
 70a:	80 83       	st	Z, r24
 70c:	24 81       	ldd	r18, Z+4	; 0x04
 70e:	35 81       	ldd	r19, Z+5	; 0x05
 710:	46 81       	ldd	r20, Z+6	; 0x06
 712:	57 81       	ldd	r21, Z+7	; 0x07
 714:	57 ff       	sbrs	r21, 7
 716:	1a c0       	rjmp	.+52     	; 0x74c <_fpadd_parts+0x286>
 718:	c9 01       	movw	r24, r18
 71a:	aa 27       	eor	r26, r26
 71c:	97 fd       	sbrc	r25, 7
 71e:	a0 95       	com	r26
 720:	ba 2f       	mov	r27, r26
 722:	81 70       	andi	r24, 0x01	; 1
 724:	90 70       	andi	r25, 0x00	; 0
 726:	a0 70       	andi	r26, 0x00	; 0
 728:	b0 70       	andi	r27, 0x00	; 0
 72a:	56 95       	lsr	r21
 72c:	47 95       	ror	r20
 72e:	37 95       	ror	r19
 730:	27 95       	ror	r18
 732:	82 2b       	or	r24, r18
 734:	93 2b       	or	r25, r19
 736:	a4 2b       	or	r26, r20
 738:	b5 2b       	or	r27, r21
 73a:	84 83       	std	Z+4, r24	; 0x04
 73c:	95 83       	std	Z+5, r25	; 0x05
 73e:	a6 83       	std	Z+6, r26	; 0x06
 740:	b7 83       	std	Z+7, r27	; 0x07
 742:	82 81       	ldd	r24, Z+2	; 0x02
 744:	93 81       	ldd	r25, Z+3	; 0x03
 746:	01 96       	adiw	r24, 0x01	; 1
 748:	93 83       	std	Z+3, r25	; 0x03
 74a:	82 83       	std	Z+2, r24	; 0x02
 74c:	df 01       	movw	r26, r30
 74e:	01 c0       	rjmp	.+2      	; 0x752 <_fpadd_parts+0x28c>
 750:	d2 01       	movw	r26, r4
 752:	cd 01       	movw	r24, r26
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
 758:	e2 e1       	ldi	r30, 0x12	; 18
 75a:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__epilogue_restores__>

0000075e <__subsf3>:
 75e:	a0 e2       	ldi	r26, 0x20	; 32
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	e5 eb       	ldi	r30, 0xB5	; 181
 764:	f3 e0       	ldi	r31, 0x03	; 3
 766:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__prologue_saves__+0x18>
 76a:	69 83       	std	Y+1, r22	; 0x01
 76c:	7a 83       	std	Y+2, r23	; 0x02
 76e:	8b 83       	std	Y+3, r24	; 0x03
 770:	9c 83       	std	Y+4, r25	; 0x04
 772:	2d 83       	std	Y+5, r18	; 0x05
 774:	3e 83       	std	Y+6, r19	; 0x06
 776:	4f 83       	std	Y+7, r20	; 0x07
 778:	58 87       	std	Y+8, r21	; 0x08
 77a:	e9 e0       	ldi	r30, 0x09	; 9
 77c:	ee 2e       	mov	r14, r30
 77e:	f1 2c       	mov	r15, r1
 780:	ec 0e       	add	r14, r28
 782:	fd 1e       	adc	r15, r29
 784:	ce 01       	movw	r24, r28
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	b7 01       	movw	r22, r14
 78a:	0e 94 88 06 	call	0xd10	; 0xd10 <__unpack_f>
 78e:	8e 01       	movw	r16, r28
 790:	0f 5e       	subi	r16, 0xEF	; 239
 792:	1f 4f       	sbci	r17, 0xFF	; 255
 794:	ce 01       	movw	r24, r28
 796:	05 96       	adiw	r24, 0x05	; 5
 798:	b8 01       	movw	r22, r16
 79a:	0e 94 88 06 	call	0xd10	; 0xd10 <__unpack_f>
 79e:	8a 89       	ldd	r24, Y+18	; 0x12
 7a0:	91 e0       	ldi	r25, 0x01	; 1
 7a2:	89 27       	eor	r24, r25
 7a4:	8a 8b       	std	Y+18, r24	; 0x12
 7a6:	c7 01       	movw	r24, r14
 7a8:	b8 01       	movw	r22, r16
 7aa:	ae 01       	movw	r20, r28
 7ac:	47 5e       	subi	r20, 0xE7	; 231
 7ae:	5f 4f       	sbci	r21, 0xFF	; 255
 7b0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_fpadd_parts>
 7b4:	0e 94 b3 05 	call	0xb66	; 0xb66 <__pack_f>
 7b8:	a0 96       	adiw	r28, 0x20	; 32
 7ba:	e6 e0       	ldi	r30, 0x06	; 6
 7bc:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__epilogue_restores__+0x18>

000007c0 <__addsf3>:
 7c0:	a0 e2       	ldi	r26, 0x20	; 32
 7c2:	b0 e0       	ldi	r27, 0x00	; 0
 7c4:	e6 ee       	ldi	r30, 0xE6	; 230
 7c6:	f3 e0       	ldi	r31, 0x03	; 3
 7c8:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__prologue_saves__+0x18>
 7cc:	69 83       	std	Y+1, r22	; 0x01
 7ce:	7a 83       	std	Y+2, r23	; 0x02
 7d0:	8b 83       	std	Y+3, r24	; 0x03
 7d2:	9c 83       	std	Y+4, r25	; 0x04
 7d4:	2d 83       	std	Y+5, r18	; 0x05
 7d6:	3e 83       	std	Y+6, r19	; 0x06
 7d8:	4f 83       	std	Y+7, r20	; 0x07
 7da:	58 87       	std	Y+8, r21	; 0x08
 7dc:	f9 e0       	ldi	r31, 0x09	; 9
 7de:	ef 2e       	mov	r14, r31
 7e0:	f1 2c       	mov	r15, r1
 7e2:	ec 0e       	add	r14, r28
 7e4:	fd 1e       	adc	r15, r29
 7e6:	ce 01       	movw	r24, r28
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	b7 01       	movw	r22, r14
 7ec:	0e 94 88 06 	call	0xd10	; 0xd10 <__unpack_f>
 7f0:	8e 01       	movw	r16, r28
 7f2:	0f 5e       	subi	r16, 0xEF	; 239
 7f4:	1f 4f       	sbci	r17, 0xFF	; 255
 7f6:	ce 01       	movw	r24, r28
 7f8:	05 96       	adiw	r24, 0x05	; 5
 7fa:	b8 01       	movw	r22, r16
 7fc:	0e 94 88 06 	call	0xd10	; 0xd10 <__unpack_f>
 800:	c7 01       	movw	r24, r14
 802:	b8 01       	movw	r22, r16
 804:	ae 01       	movw	r20, r28
 806:	47 5e       	subi	r20, 0xE7	; 231
 808:	5f 4f       	sbci	r21, 0xFF	; 255
 80a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_fpadd_parts>
 80e:	0e 94 b3 05 	call	0xb66	; 0xb66 <__pack_f>
 812:	a0 96       	adiw	r28, 0x20	; 32
 814:	e6 e0       	ldi	r30, 0x06	; 6
 816:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__epilogue_restores__+0x18>

0000081a <__mulsf3>:
 81a:	a0 e2       	ldi	r26, 0x20	; 32
 81c:	b0 e0       	ldi	r27, 0x00	; 0
 81e:	e3 e1       	ldi	r30, 0x13	; 19
 820:	f4 e0       	ldi	r31, 0x04	; 4
 822:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__prologue_saves__>
 826:	69 83       	std	Y+1, r22	; 0x01
 828:	7a 83       	std	Y+2, r23	; 0x02
 82a:	8b 83       	std	Y+3, r24	; 0x03
 82c:	9c 83       	std	Y+4, r25	; 0x04
 82e:	2d 83       	std	Y+5, r18	; 0x05
 830:	3e 83       	std	Y+6, r19	; 0x06
 832:	4f 83       	std	Y+7, r20	; 0x07
 834:	58 87       	std	Y+8, r21	; 0x08
 836:	ce 01       	movw	r24, r28
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	be 01       	movw	r22, r28
 83c:	67 5f       	subi	r22, 0xF7	; 247
 83e:	7f 4f       	sbci	r23, 0xFF	; 255
 840:	0e 94 88 06 	call	0xd10	; 0xd10 <__unpack_f>
 844:	ce 01       	movw	r24, r28
 846:	05 96       	adiw	r24, 0x05	; 5
 848:	be 01       	movw	r22, r28
 84a:	6f 5e       	subi	r22, 0xEF	; 239
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	0e 94 88 06 	call	0xd10	; 0xd10 <__unpack_f>
 852:	99 85       	ldd	r25, Y+9	; 0x09
 854:	92 30       	cpi	r25, 0x02	; 2
 856:	88 f0       	brcs	.+34     	; 0x87a <__mulsf3+0x60>
 858:	89 89       	ldd	r24, Y+17	; 0x11
 85a:	82 30       	cpi	r24, 0x02	; 2
 85c:	c8 f0       	brcs	.+50     	; 0x890 <__mulsf3+0x76>
 85e:	94 30       	cpi	r25, 0x04	; 4
 860:	19 f4       	brne	.+6      	; 0x868 <__mulsf3+0x4e>
 862:	82 30       	cpi	r24, 0x02	; 2
 864:	51 f4       	brne	.+20     	; 0x87a <__mulsf3+0x60>
 866:	04 c0       	rjmp	.+8      	; 0x870 <__mulsf3+0x56>
 868:	84 30       	cpi	r24, 0x04	; 4
 86a:	29 f4       	brne	.+10     	; 0x876 <__mulsf3+0x5c>
 86c:	92 30       	cpi	r25, 0x02	; 2
 86e:	81 f4       	brne	.+32     	; 0x890 <__mulsf3+0x76>
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	91 e0       	ldi	r25, 0x01	; 1
 874:	c6 c0       	rjmp	.+396    	; 0xa02 <__stack+0x103>
 876:	92 30       	cpi	r25, 0x02	; 2
 878:	49 f4       	brne	.+18     	; 0x88c <__mulsf3+0x72>
 87a:	20 e0       	ldi	r18, 0x00	; 0
 87c:	9a 85       	ldd	r25, Y+10	; 0x0a
 87e:	8a 89       	ldd	r24, Y+18	; 0x12
 880:	98 13       	cpse	r25, r24
 882:	21 e0       	ldi	r18, 0x01	; 1
 884:	2a 87       	std	Y+10, r18	; 0x0a
 886:	ce 01       	movw	r24, r28
 888:	09 96       	adiw	r24, 0x09	; 9
 88a:	bb c0       	rjmp	.+374    	; 0xa02 <__stack+0x103>
 88c:	82 30       	cpi	r24, 0x02	; 2
 88e:	49 f4       	brne	.+18     	; 0x8a2 <__mulsf3+0x88>
 890:	20 e0       	ldi	r18, 0x00	; 0
 892:	9a 85       	ldd	r25, Y+10	; 0x0a
 894:	8a 89       	ldd	r24, Y+18	; 0x12
 896:	98 13       	cpse	r25, r24
 898:	21 e0       	ldi	r18, 0x01	; 1
 89a:	2a 8b       	std	Y+18, r18	; 0x12
 89c:	ce 01       	movw	r24, r28
 89e:	41 96       	adiw	r24, 0x11	; 17
 8a0:	b0 c0       	rjmp	.+352    	; 0xa02 <__stack+0x103>
 8a2:	2d 84       	ldd	r2, Y+13	; 0x0d
 8a4:	3e 84       	ldd	r3, Y+14	; 0x0e
 8a6:	4f 84       	ldd	r4, Y+15	; 0x0f
 8a8:	58 88       	ldd	r5, Y+16	; 0x10
 8aa:	6d 88       	ldd	r6, Y+21	; 0x15
 8ac:	7e 88       	ldd	r7, Y+22	; 0x16
 8ae:	8f 88       	ldd	r8, Y+23	; 0x17
 8b0:	98 8c       	ldd	r9, Y+24	; 0x18
 8b2:	ee 24       	eor	r14, r14
 8b4:	ff 24       	eor	r15, r15
 8b6:	87 01       	movw	r16, r14
 8b8:	aa 24       	eor	r10, r10
 8ba:	bb 24       	eor	r11, r11
 8bc:	65 01       	movw	r12, r10
 8be:	40 e0       	ldi	r20, 0x00	; 0
 8c0:	50 e0       	ldi	r21, 0x00	; 0
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	e0 e0       	ldi	r30, 0x00	; 0
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	c1 01       	movw	r24, r2
 8cc:	81 70       	andi	r24, 0x01	; 1
 8ce:	90 70       	andi	r25, 0x00	; 0
 8d0:	89 2b       	or	r24, r25
 8d2:	e9 f0       	breq	.+58     	; 0x90e <__stack+0xf>
 8d4:	e6 0c       	add	r14, r6
 8d6:	f7 1c       	adc	r15, r7
 8d8:	08 1d       	adc	r16, r8
 8da:	19 1d       	adc	r17, r9
 8dc:	9a 01       	movw	r18, r20
 8de:	ab 01       	movw	r20, r22
 8e0:	2a 0d       	add	r18, r10
 8e2:	3b 1d       	adc	r19, r11
 8e4:	4c 1d       	adc	r20, r12
 8e6:	5d 1d       	adc	r21, r13
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	a0 e0       	ldi	r26, 0x00	; 0
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	e6 14       	cp	r14, r6
 8f2:	f7 04       	cpc	r15, r7
 8f4:	08 05       	cpc	r16, r8
 8f6:	19 05       	cpc	r17, r9
 8f8:	20 f4       	brcc	.+8      	; 0x902 <__stack+0x3>
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	a0 e0       	ldi	r26, 0x00	; 0
 900:	b0 e0       	ldi	r27, 0x00	; 0
 902:	ba 01       	movw	r22, r20
 904:	a9 01       	movw	r20, r18
 906:	48 0f       	add	r20, r24
 908:	59 1f       	adc	r21, r25
 90a:	6a 1f       	adc	r22, r26
 90c:	7b 1f       	adc	r23, r27
 90e:	aa 0c       	add	r10, r10
 910:	bb 1c       	adc	r11, r11
 912:	cc 1c       	adc	r12, r12
 914:	dd 1c       	adc	r13, r13
 916:	97 fe       	sbrs	r9, 7
 918:	08 c0       	rjmp	.+16     	; 0x92a <__stack+0x2b>
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	a0 e0       	ldi	r26, 0x00	; 0
 920:	b0 e0       	ldi	r27, 0x00	; 0
 922:	a8 2a       	or	r10, r24
 924:	b9 2a       	or	r11, r25
 926:	ca 2a       	or	r12, r26
 928:	db 2a       	or	r13, r27
 92a:	31 96       	adiw	r30, 0x01	; 1
 92c:	e0 32       	cpi	r30, 0x20	; 32
 92e:	f1 05       	cpc	r31, r1
 930:	49 f0       	breq	.+18     	; 0x944 <__stack+0x45>
 932:	66 0c       	add	r6, r6
 934:	77 1c       	adc	r7, r7
 936:	88 1c       	adc	r8, r8
 938:	99 1c       	adc	r9, r9
 93a:	56 94       	lsr	r5
 93c:	47 94       	ror	r4
 93e:	37 94       	ror	r3
 940:	27 94       	ror	r2
 942:	c3 cf       	rjmp	.-122    	; 0x8ca <__mulsf3+0xb0>
 944:	fa 85       	ldd	r31, Y+10	; 0x0a
 946:	ea 89       	ldd	r30, Y+18	; 0x12
 948:	2b 89       	ldd	r18, Y+19	; 0x13
 94a:	3c 89       	ldd	r19, Y+20	; 0x14
 94c:	8b 85       	ldd	r24, Y+11	; 0x0b
 94e:	9c 85       	ldd	r25, Y+12	; 0x0c
 950:	28 0f       	add	r18, r24
 952:	39 1f       	adc	r19, r25
 954:	2e 5f       	subi	r18, 0xFE	; 254
 956:	3f 4f       	sbci	r19, 0xFF	; 255
 958:	17 c0       	rjmp	.+46     	; 0x988 <__stack+0x89>
 95a:	ca 01       	movw	r24, r20
 95c:	81 70       	andi	r24, 0x01	; 1
 95e:	90 70       	andi	r25, 0x00	; 0
 960:	89 2b       	or	r24, r25
 962:	61 f0       	breq	.+24     	; 0x97c <__stack+0x7d>
 964:	16 95       	lsr	r17
 966:	07 95       	ror	r16
 968:	f7 94       	ror	r15
 96a:	e7 94       	ror	r14
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	a0 e0       	ldi	r26, 0x00	; 0
 972:	b0 e8       	ldi	r27, 0x80	; 128
 974:	e8 2a       	or	r14, r24
 976:	f9 2a       	or	r15, r25
 978:	0a 2b       	or	r16, r26
 97a:	1b 2b       	or	r17, r27
 97c:	76 95       	lsr	r23
 97e:	67 95       	ror	r22
 980:	57 95       	ror	r21
 982:	47 95       	ror	r20
 984:	2f 5f       	subi	r18, 0xFF	; 255
 986:	3f 4f       	sbci	r19, 0xFF	; 255
 988:	77 fd       	sbrc	r23, 7
 98a:	e7 cf       	rjmp	.-50     	; 0x95a <__stack+0x5b>
 98c:	0c c0       	rjmp	.+24     	; 0x9a6 <__stack+0xa7>
 98e:	44 0f       	add	r20, r20
 990:	55 1f       	adc	r21, r21
 992:	66 1f       	adc	r22, r22
 994:	77 1f       	adc	r23, r23
 996:	17 fd       	sbrc	r17, 7
 998:	41 60       	ori	r20, 0x01	; 1
 99a:	ee 0c       	add	r14, r14
 99c:	ff 1c       	adc	r15, r15
 99e:	00 1f       	adc	r16, r16
 9a0:	11 1f       	adc	r17, r17
 9a2:	21 50       	subi	r18, 0x01	; 1
 9a4:	30 40       	sbci	r19, 0x00	; 0
 9a6:	40 30       	cpi	r20, 0x00	; 0
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	59 07       	cpc	r21, r25
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	69 07       	cpc	r22, r25
 9b0:	90 e4       	ldi	r25, 0x40	; 64
 9b2:	79 07       	cpc	r23, r25
 9b4:	60 f3       	brcs	.-40     	; 0x98e <__stack+0x8f>
 9b6:	2b 8f       	std	Y+27, r18	; 0x1b
 9b8:	3c 8f       	std	Y+28, r19	; 0x1c
 9ba:	db 01       	movw	r26, r22
 9bc:	ca 01       	movw	r24, r20
 9be:	8f 77       	andi	r24, 0x7F	; 127
 9c0:	90 70       	andi	r25, 0x00	; 0
 9c2:	a0 70       	andi	r26, 0x00	; 0
 9c4:	b0 70       	andi	r27, 0x00	; 0
 9c6:	80 34       	cpi	r24, 0x40	; 64
 9c8:	91 05       	cpc	r25, r1
 9ca:	a1 05       	cpc	r26, r1
 9cc:	b1 05       	cpc	r27, r1
 9ce:	61 f4       	brne	.+24     	; 0x9e8 <__stack+0xe9>
 9d0:	47 fd       	sbrc	r20, 7
 9d2:	0a c0       	rjmp	.+20     	; 0x9e8 <__stack+0xe9>
 9d4:	e1 14       	cp	r14, r1
 9d6:	f1 04       	cpc	r15, r1
 9d8:	01 05       	cpc	r16, r1
 9da:	11 05       	cpc	r17, r1
 9dc:	29 f0       	breq	.+10     	; 0x9e8 <__stack+0xe9>
 9de:	40 5c       	subi	r20, 0xC0	; 192
 9e0:	5f 4f       	sbci	r21, 0xFF	; 255
 9e2:	6f 4f       	sbci	r22, 0xFF	; 255
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	40 78       	andi	r20, 0x80	; 128
 9e8:	1a 8e       	std	Y+26, r1	; 0x1a
 9ea:	fe 17       	cp	r31, r30
 9ec:	11 f0       	breq	.+4      	; 0x9f2 <__stack+0xf3>
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	8a 8f       	std	Y+26, r24	; 0x1a
 9f2:	4d 8f       	std	Y+29, r20	; 0x1d
 9f4:	5e 8f       	std	Y+30, r21	; 0x1e
 9f6:	6f 8f       	std	Y+31, r22	; 0x1f
 9f8:	78 a3       	std	Y+32, r23	; 0x20
 9fa:	83 e0       	ldi	r24, 0x03	; 3
 9fc:	89 8f       	std	Y+25, r24	; 0x19
 9fe:	ce 01       	movw	r24, r28
 a00:	49 96       	adiw	r24, 0x19	; 25
 a02:	0e 94 b3 05 	call	0xb66	; 0xb66 <__pack_f>
 a06:	a0 96       	adiw	r28, 0x20	; 32
 a08:	e2 e1       	ldi	r30, 0x12	; 18
 a0a:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__epilogue_restores__>

00000a0e <__divsf3>:
 a0e:	a8 e1       	ldi	r26, 0x18	; 24
 a10:	b0 e0       	ldi	r27, 0x00	; 0
 a12:	ed e0       	ldi	r30, 0x0D	; 13
 a14:	f5 e0       	ldi	r31, 0x05	; 5
 a16:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__prologue_saves__+0x10>
 a1a:	69 83       	std	Y+1, r22	; 0x01
 a1c:	7a 83       	std	Y+2, r23	; 0x02
 a1e:	8b 83       	std	Y+3, r24	; 0x03
 a20:	9c 83       	std	Y+4, r25	; 0x04
 a22:	2d 83       	std	Y+5, r18	; 0x05
 a24:	3e 83       	std	Y+6, r19	; 0x06
 a26:	4f 83       	std	Y+7, r20	; 0x07
 a28:	58 87       	std	Y+8, r21	; 0x08
 a2a:	b9 e0       	ldi	r27, 0x09	; 9
 a2c:	eb 2e       	mov	r14, r27
 a2e:	f1 2c       	mov	r15, r1
 a30:	ec 0e       	add	r14, r28
 a32:	fd 1e       	adc	r15, r29
 a34:	ce 01       	movw	r24, r28
 a36:	01 96       	adiw	r24, 0x01	; 1
 a38:	b7 01       	movw	r22, r14
 a3a:	0e 94 88 06 	call	0xd10	; 0xd10 <__unpack_f>
 a3e:	8e 01       	movw	r16, r28
 a40:	0f 5e       	subi	r16, 0xEF	; 239
 a42:	1f 4f       	sbci	r17, 0xFF	; 255
 a44:	ce 01       	movw	r24, r28
 a46:	05 96       	adiw	r24, 0x05	; 5
 a48:	b8 01       	movw	r22, r16
 a4a:	0e 94 88 06 	call	0xd10	; 0xd10 <__unpack_f>
 a4e:	29 85       	ldd	r18, Y+9	; 0x09
 a50:	22 30       	cpi	r18, 0x02	; 2
 a52:	08 f4       	brcc	.+2      	; 0xa56 <__divsf3+0x48>
 a54:	7e c0       	rjmp	.+252    	; 0xb52 <__divsf3+0x144>
 a56:	39 89       	ldd	r19, Y+17	; 0x11
 a58:	32 30       	cpi	r19, 0x02	; 2
 a5a:	10 f4       	brcc	.+4      	; 0xa60 <__divsf3+0x52>
 a5c:	b8 01       	movw	r22, r16
 a5e:	7c c0       	rjmp	.+248    	; 0xb58 <__divsf3+0x14a>
 a60:	8a 85       	ldd	r24, Y+10	; 0x0a
 a62:	9a 89       	ldd	r25, Y+18	; 0x12
 a64:	89 27       	eor	r24, r25
 a66:	8a 87       	std	Y+10, r24	; 0x0a
 a68:	24 30       	cpi	r18, 0x04	; 4
 a6a:	11 f0       	breq	.+4      	; 0xa70 <__divsf3+0x62>
 a6c:	22 30       	cpi	r18, 0x02	; 2
 a6e:	31 f4       	brne	.+12     	; 0xa7c <__divsf3+0x6e>
 a70:	23 17       	cp	r18, r19
 a72:	09 f0       	breq	.+2      	; 0xa76 <__divsf3+0x68>
 a74:	6e c0       	rjmp	.+220    	; 0xb52 <__divsf3+0x144>
 a76:	60 e0       	ldi	r22, 0x00	; 0
 a78:	71 e0       	ldi	r23, 0x01	; 1
 a7a:	6e c0       	rjmp	.+220    	; 0xb58 <__divsf3+0x14a>
 a7c:	34 30       	cpi	r19, 0x04	; 4
 a7e:	39 f4       	brne	.+14     	; 0xa8e <__divsf3+0x80>
 a80:	1d 86       	std	Y+13, r1	; 0x0d
 a82:	1e 86       	std	Y+14, r1	; 0x0e
 a84:	1f 86       	std	Y+15, r1	; 0x0f
 a86:	18 8a       	std	Y+16, r1	; 0x10
 a88:	1c 86       	std	Y+12, r1	; 0x0c
 a8a:	1b 86       	std	Y+11, r1	; 0x0b
 a8c:	04 c0       	rjmp	.+8      	; 0xa96 <__divsf3+0x88>
 a8e:	32 30       	cpi	r19, 0x02	; 2
 a90:	21 f4       	brne	.+8      	; 0xa9a <__divsf3+0x8c>
 a92:	84 e0       	ldi	r24, 0x04	; 4
 a94:	89 87       	std	Y+9, r24	; 0x09
 a96:	b7 01       	movw	r22, r14
 a98:	5f c0       	rjmp	.+190    	; 0xb58 <__divsf3+0x14a>
 a9a:	2b 85       	ldd	r18, Y+11	; 0x0b
 a9c:	3c 85       	ldd	r19, Y+12	; 0x0c
 a9e:	8b 89       	ldd	r24, Y+19	; 0x13
 aa0:	9c 89       	ldd	r25, Y+20	; 0x14
 aa2:	28 1b       	sub	r18, r24
 aa4:	39 0b       	sbc	r19, r25
 aa6:	3c 87       	std	Y+12, r19	; 0x0c
 aa8:	2b 87       	std	Y+11, r18	; 0x0b
 aaa:	ed 84       	ldd	r14, Y+13	; 0x0d
 aac:	fe 84       	ldd	r15, Y+14	; 0x0e
 aae:	0f 85       	ldd	r16, Y+15	; 0x0f
 ab0:	18 89       	ldd	r17, Y+16	; 0x10
 ab2:	ad 88       	ldd	r10, Y+21	; 0x15
 ab4:	be 88       	ldd	r11, Y+22	; 0x16
 ab6:	cf 88       	ldd	r12, Y+23	; 0x17
 ab8:	d8 8c       	ldd	r13, Y+24	; 0x18
 aba:	ea 14       	cp	r14, r10
 abc:	fb 04       	cpc	r15, r11
 abe:	0c 05       	cpc	r16, r12
 ac0:	1d 05       	cpc	r17, r13
 ac2:	40 f4       	brcc	.+16     	; 0xad4 <__divsf3+0xc6>
 ac4:	ee 0c       	add	r14, r14
 ac6:	ff 1c       	adc	r15, r15
 ac8:	00 1f       	adc	r16, r16
 aca:	11 1f       	adc	r17, r17
 acc:	21 50       	subi	r18, 0x01	; 1
 ace:	30 40       	sbci	r19, 0x00	; 0
 ad0:	3c 87       	std	Y+12, r19	; 0x0c
 ad2:	2b 87       	std	Y+11, r18	; 0x0b
 ad4:	20 e0       	ldi	r18, 0x00	; 0
 ad6:	30 e0       	ldi	r19, 0x00	; 0
 ad8:	40 e0       	ldi	r20, 0x00	; 0
 ada:	50 e0       	ldi	r21, 0x00	; 0
 adc:	80 e0       	ldi	r24, 0x00	; 0
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	a0 e0       	ldi	r26, 0x00	; 0
 ae2:	b0 e4       	ldi	r27, 0x40	; 64
 ae4:	60 e0       	ldi	r22, 0x00	; 0
 ae6:	70 e0       	ldi	r23, 0x00	; 0
 ae8:	ea 14       	cp	r14, r10
 aea:	fb 04       	cpc	r15, r11
 aec:	0c 05       	cpc	r16, r12
 aee:	1d 05       	cpc	r17, r13
 af0:	40 f0       	brcs	.+16     	; 0xb02 <__divsf3+0xf4>
 af2:	28 2b       	or	r18, r24
 af4:	39 2b       	or	r19, r25
 af6:	4a 2b       	or	r20, r26
 af8:	5b 2b       	or	r21, r27
 afa:	ea 18       	sub	r14, r10
 afc:	fb 08       	sbc	r15, r11
 afe:	0c 09       	sbc	r16, r12
 b00:	1d 09       	sbc	r17, r13
 b02:	b6 95       	lsr	r27
 b04:	a7 95       	ror	r26
 b06:	97 95       	ror	r25
 b08:	87 95       	ror	r24
 b0a:	ee 0c       	add	r14, r14
 b0c:	ff 1c       	adc	r15, r15
 b0e:	00 1f       	adc	r16, r16
 b10:	11 1f       	adc	r17, r17
 b12:	6f 5f       	subi	r22, 0xFF	; 255
 b14:	7f 4f       	sbci	r23, 0xFF	; 255
 b16:	6f 31       	cpi	r22, 0x1F	; 31
 b18:	71 05       	cpc	r23, r1
 b1a:	31 f7       	brne	.-52     	; 0xae8 <__divsf3+0xda>
 b1c:	da 01       	movw	r26, r20
 b1e:	c9 01       	movw	r24, r18
 b20:	8f 77       	andi	r24, 0x7F	; 127
 b22:	90 70       	andi	r25, 0x00	; 0
 b24:	a0 70       	andi	r26, 0x00	; 0
 b26:	b0 70       	andi	r27, 0x00	; 0
 b28:	80 34       	cpi	r24, 0x40	; 64
 b2a:	91 05       	cpc	r25, r1
 b2c:	a1 05       	cpc	r26, r1
 b2e:	b1 05       	cpc	r27, r1
 b30:	61 f4       	brne	.+24     	; 0xb4a <__divsf3+0x13c>
 b32:	27 fd       	sbrc	r18, 7
 b34:	0a c0       	rjmp	.+20     	; 0xb4a <__divsf3+0x13c>
 b36:	e1 14       	cp	r14, r1
 b38:	f1 04       	cpc	r15, r1
 b3a:	01 05       	cpc	r16, r1
 b3c:	11 05       	cpc	r17, r1
 b3e:	29 f0       	breq	.+10     	; 0xb4a <__divsf3+0x13c>
 b40:	20 5c       	subi	r18, 0xC0	; 192
 b42:	3f 4f       	sbci	r19, 0xFF	; 255
 b44:	4f 4f       	sbci	r20, 0xFF	; 255
 b46:	5f 4f       	sbci	r21, 0xFF	; 255
 b48:	20 78       	andi	r18, 0x80	; 128
 b4a:	2d 87       	std	Y+13, r18	; 0x0d
 b4c:	3e 87       	std	Y+14, r19	; 0x0e
 b4e:	4f 87       	std	Y+15, r20	; 0x0f
 b50:	58 8b       	std	Y+16, r21	; 0x10
 b52:	be 01       	movw	r22, r28
 b54:	67 5f       	subi	r22, 0xF7	; 247
 b56:	7f 4f       	sbci	r23, 0xFF	; 255
 b58:	cb 01       	movw	r24, r22
 b5a:	0e 94 b3 05 	call	0xb66	; 0xb66 <__pack_f>
 b5e:	68 96       	adiw	r28, 0x18	; 24
 b60:	ea e0       	ldi	r30, 0x0A	; 10
 b62:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__epilogue_restores__+0x10>

00000b66 <__pack_f>:
 b66:	df 92       	push	r13
 b68:	ef 92       	push	r14
 b6a:	ff 92       	push	r15
 b6c:	0f 93       	push	r16
 b6e:	1f 93       	push	r17
 b70:	fc 01       	movw	r30, r24
 b72:	e4 80       	ldd	r14, Z+4	; 0x04
 b74:	f5 80       	ldd	r15, Z+5	; 0x05
 b76:	06 81       	ldd	r16, Z+6	; 0x06
 b78:	17 81       	ldd	r17, Z+7	; 0x07
 b7a:	d1 80       	ldd	r13, Z+1	; 0x01
 b7c:	80 81       	ld	r24, Z
 b7e:	82 30       	cpi	r24, 0x02	; 2
 b80:	48 f4       	brcc	.+18     	; 0xb94 <__pack_f+0x2e>
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	a0 e1       	ldi	r26, 0x10	; 16
 b88:	b0 e0       	ldi	r27, 0x00	; 0
 b8a:	e8 2a       	or	r14, r24
 b8c:	f9 2a       	or	r15, r25
 b8e:	0a 2b       	or	r16, r26
 b90:	1b 2b       	or	r17, r27
 b92:	a5 c0       	rjmp	.+330    	; 0xcde <__pack_f+0x178>
 b94:	84 30       	cpi	r24, 0x04	; 4
 b96:	09 f4       	brne	.+2      	; 0xb9a <__pack_f+0x34>
 b98:	9f c0       	rjmp	.+318    	; 0xcd8 <__pack_f+0x172>
 b9a:	82 30       	cpi	r24, 0x02	; 2
 b9c:	21 f4       	brne	.+8      	; 0xba6 <__pack_f+0x40>
 b9e:	ee 24       	eor	r14, r14
 ba0:	ff 24       	eor	r15, r15
 ba2:	87 01       	movw	r16, r14
 ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <__pack_f+0x4a>
 ba6:	e1 14       	cp	r14, r1
 ba8:	f1 04       	cpc	r15, r1
 baa:	01 05       	cpc	r16, r1
 bac:	11 05       	cpc	r17, r1
 bae:	19 f4       	brne	.+6      	; 0xbb6 <__pack_f+0x50>
 bb0:	e0 e0       	ldi	r30, 0x00	; 0
 bb2:	f0 e0       	ldi	r31, 0x00	; 0
 bb4:	96 c0       	rjmp	.+300    	; 0xce2 <__pack_f+0x17c>
 bb6:	62 81       	ldd	r22, Z+2	; 0x02
 bb8:	73 81       	ldd	r23, Z+3	; 0x03
 bba:	9f ef       	ldi	r25, 0xFF	; 255
 bbc:	62 38       	cpi	r22, 0x82	; 130
 bbe:	79 07       	cpc	r23, r25
 bc0:	0c f0       	brlt	.+2      	; 0xbc4 <__pack_f+0x5e>
 bc2:	5b c0       	rjmp	.+182    	; 0xc7a <__pack_f+0x114>
 bc4:	22 e8       	ldi	r18, 0x82	; 130
 bc6:	3f ef       	ldi	r19, 0xFF	; 255
 bc8:	26 1b       	sub	r18, r22
 bca:	37 0b       	sbc	r19, r23
 bcc:	2a 31       	cpi	r18, 0x1A	; 26
 bce:	31 05       	cpc	r19, r1
 bd0:	2c f0       	brlt	.+10     	; 0xbdc <__pack_f+0x76>
 bd2:	20 e0       	ldi	r18, 0x00	; 0
 bd4:	30 e0       	ldi	r19, 0x00	; 0
 bd6:	40 e0       	ldi	r20, 0x00	; 0
 bd8:	50 e0       	ldi	r21, 0x00	; 0
 bda:	2a c0       	rjmp	.+84     	; 0xc30 <__pack_f+0xca>
 bdc:	b8 01       	movw	r22, r16
 bde:	a7 01       	movw	r20, r14
 be0:	02 2e       	mov	r0, r18
 be2:	04 c0       	rjmp	.+8      	; 0xbec <__pack_f+0x86>
 be4:	76 95       	lsr	r23
 be6:	67 95       	ror	r22
 be8:	57 95       	ror	r21
 bea:	47 95       	ror	r20
 bec:	0a 94       	dec	r0
 bee:	d2 f7       	brpl	.-12     	; 0xbe4 <__pack_f+0x7e>
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	a0 e0       	ldi	r26, 0x00	; 0
 bf6:	b0 e0       	ldi	r27, 0x00	; 0
 bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0x9c>
 bfa:	88 0f       	add	r24, r24
 bfc:	99 1f       	adc	r25, r25
 bfe:	aa 1f       	adc	r26, r26
 c00:	bb 1f       	adc	r27, r27
 c02:	2a 95       	dec	r18
 c04:	d2 f7       	brpl	.-12     	; 0xbfa <__pack_f+0x94>
 c06:	01 97       	sbiw	r24, 0x01	; 1
 c08:	a1 09       	sbc	r26, r1
 c0a:	b1 09       	sbc	r27, r1
 c0c:	8e 21       	and	r24, r14
 c0e:	9f 21       	and	r25, r15
 c10:	a0 23       	and	r26, r16
 c12:	b1 23       	and	r27, r17
 c14:	00 97       	sbiw	r24, 0x00	; 0
 c16:	a1 05       	cpc	r26, r1
 c18:	b1 05       	cpc	r27, r1
 c1a:	21 f0       	breq	.+8      	; 0xc24 <__pack_f+0xbe>
 c1c:	81 e0       	ldi	r24, 0x01	; 1
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	a0 e0       	ldi	r26, 0x00	; 0
 c22:	b0 e0       	ldi	r27, 0x00	; 0
 c24:	9a 01       	movw	r18, r20
 c26:	ab 01       	movw	r20, r22
 c28:	28 2b       	or	r18, r24
 c2a:	39 2b       	or	r19, r25
 c2c:	4a 2b       	or	r20, r26
 c2e:	5b 2b       	or	r21, r27
 c30:	da 01       	movw	r26, r20
 c32:	c9 01       	movw	r24, r18
 c34:	8f 77       	andi	r24, 0x7F	; 127
 c36:	90 70       	andi	r25, 0x00	; 0
 c38:	a0 70       	andi	r26, 0x00	; 0
 c3a:	b0 70       	andi	r27, 0x00	; 0
 c3c:	80 34       	cpi	r24, 0x40	; 64
 c3e:	91 05       	cpc	r25, r1
 c40:	a1 05       	cpc	r26, r1
 c42:	b1 05       	cpc	r27, r1
 c44:	39 f4       	brne	.+14     	; 0xc54 <__pack_f+0xee>
 c46:	27 ff       	sbrs	r18, 7
 c48:	09 c0       	rjmp	.+18     	; 0xc5c <__pack_f+0xf6>
 c4a:	20 5c       	subi	r18, 0xC0	; 192
 c4c:	3f 4f       	sbci	r19, 0xFF	; 255
 c4e:	4f 4f       	sbci	r20, 0xFF	; 255
 c50:	5f 4f       	sbci	r21, 0xFF	; 255
 c52:	04 c0       	rjmp	.+8      	; 0xc5c <__pack_f+0xf6>
 c54:	21 5c       	subi	r18, 0xC1	; 193
 c56:	3f 4f       	sbci	r19, 0xFF	; 255
 c58:	4f 4f       	sbci	r20, 0xFF	; 255
 c5a:	5f 4f       	sbci	r21, 0xFF	; 255
 c5c:	e0 e0       	ldi	r30, 0x00	; 0
 c5e:	f0 e0       	ldi	r31, 0x00	; 0
 c60:	20 30       	cpi	r18, 0x00	; 0
 c62:	a0 e0       	ldi	r26, 0x00	; 0
 c64:	3a 07       	cpc	r19, r26
 c66:	a0 e0       	ldi	r26, 0x00	; 0
 c68:	4a 07       	cpc	r20, r26
 c6a:	a0 e4       	ldi	r26, 0x40	; 64
 c6c:	5a 07       	cpc	r21, r26
 c6e:	10 f0       	brcs	.+4      	; 0xc74 <__pack_f+0x10e>
 c70:	e1 e0       	ldi	r30, 0x01	; 1
 c72:	f0 e0       	ldi	r31, 0x00	; 0
 c74:	79 01       	movw	r14, r18
 c76:	8a 01       	movw	r16, r20
 c78:	27 c0       	rjmp	.+78     	; 0xcc8 <__pack_f+0x162>
 c7a:	60 38       	cpi	r22, 0x80	; 128
 c7c:	71 05       	cpc	r23, r1
 c7e:	64 f5       	brge	.+88     	; 0xcd8 <__pack_f+0x172>
 c80:	fb 01       	movw	r30, r22
 c82:	e1 58       	subi	r30, 0x81	; 129
 c84:	ff 4f       	sbci	r31, 0xFF	; 255
 c86:	d8 01       	movw	r26, r16
 c88:	c7 01       	movw	r24, r14
 c8a:	8f 77       	andi	r24, 0x7F	; 127
 c8c:	90 70       	andi	r25, 0x00	; 0
 c8e:	a0 70       	andi	r26, 0x00	; 0
 c90:	b0 70       	andi	r27, 0x00	; 0
 c92:	80 34       	cpi	r24, 0x40	; 64
 c94:	91 05       	cpc	r25, r1
 c96:	a1 05       	cpc	r26, r1
 c98:	b1 05       	cpc	r27, r1
 c9a:	39 f4       	brne	.+14     	; 0xcaa <__pack_f+0x144>
 c9c:	e7 fe       	sbrs	r14, 7
 c9e:	0d c0       	rjmp	.+26     	; 0xcba <__pack_f+0x154>
 ca0:	80 e4       	ldi	r24, 0x40	; 64
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	a0 e0       	ldi	r26, 0x00	; 0
 ca6:	b0 e0       	ldi	r27, 0x00	; 0
 ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <__pack_f+0x14c>
 caa:	8f e3       	ldi	r24, 0x3F	; 63
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	a0 e0       	ldi	r26, 0x00	; 0
 cb0:	b0 e0       	ldi	r27, 0x00	; 0
 cb2:	e8 0e       	add	r14, r24
 cb4:	f9 1e       	adc	r15, r25
 cb6:	0a 1f       	adc	r16, r26
 cb8:	1b 1f       	adc	r17, r27
 cba:	17 ff       	sbrs	r17, 7
 cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <__pack_f+0x162>
 cbe:	16 95       	lsr	r17
 cc0:	07 95       	ror	r16
 cc2:	f7 94       	ror	r15
 cc4:	e7 94       	ror	r14
 cc6:	31 96       	adiw	r30, 0x01	; 1
 cc8:	87 e0       	ldi	r24, 0x07	; 7
 cca:	16 95       	lsr	r17
 ccc:	07 95       	ror	r16
 cce:	f7 94       	ror	r15
 cd0:	e7 94       	ror	r14
 cd2:	8a 95       	dec	r24
 cd4:	d1 f7       	brne	.-12     	; 0xcca <__pack_f+0x164>
 cd6:	05 c0       	rjmp	.+10     	; 0xce2 <__pack_f+0x17c>
 cd8:	ee 24       	eor	r14, r14
 cda:	ff 24       	eor	r15, r15
 cdc:	87 01       	movw	r16, r14
 cde:	ef ef       	ldi	r30, 0xFF	; 255
 ce0:	f0 e0       	ldi	r31, 0x00	; 0
 ce2:	6e 2f       	mov	r22, r30
 ce4:	67 95       	ror	r22
 ce6:	66 27       	eor	r22, r22
 ce8:	67 95       	ror	r22
 cea:	90 2f       	mov	r25, r16
 cec:	9f 77       	andi	r25, 0x7F	; 127
 cee:	d7 94       	ror	r13
 cf0:	dd 24       	eor	r13, r13
 cf2:	d7 94       	ror	r13
 cf4:	8e 2f       	mov	r24, r30
 cf6:	86 95       	lsr	r24
 cf8:	49 2f       	mov	r20, r25
 cfa:	46 2b       	or	r20, r22
 cfc:	58 2f       	mov	r21, r24
 cfe:	5d 29       	or	r21, r13
 d00:	b7 01       	movw	r22, r14
 d02:	ca 01       	movw	r24, r20
 d04:	1f 91       	pop	r17
 d06:	0f 91       	pop	r16
 d08:	ff 90       	pop	r15
 d0a:	ef 90       	pop	r14
 d0c:	df 90       	pop	r13
 d0e:	08 95       	ret

00000d10 <__unpack_f>:
 d10:	fc 01       	movw	r30, r24
 d12:	db 01       	movw	r26, r22
 d14:	40 81       	ld	r20, Z
 d16:	51 81       	ldd	r21, Z+1	; 0x01
 d18:	22 81       	ldd	r18, Z+2	; 0x02
 d1a:	62 2f       	mov	r22, r18
 d1c:	6f 77       	andi	r22, 0x7F	; 127
 d1e:	70 e0       	ldi	r23, 0x00	; 0
 d20:	22 1f       	adc	r18, r18
 d22:	22 27       	eor	r18, r18
 d24:	22 1f       	adc	r18, r18
 d26:	93 81       	ldd	r25, Z+3	; 0x03
 d28:	89 2f       	mov	r24, r25
 d2a:	88 0f       	add	r24, r24
 d2c:	82 2b       	or	r24, r18
 d2e:	28 2f       	mov	r18, r24
 d30:	30 e0       	ldi	r19, 0x00	; 0
 d32:	99 1f       	adc	r25, r25
 d34:	99 27       	eor	r25, r25
 d36:	99 1f       	adc	r25, r25
 d38:	11 96       	adiw	r26, 0x01	; 1
 d3a:	9c 93       	st	X, r25
 d3c:	11 97       	sbiw	r26, 0x01	; 1
 d3e:	21 15       	cp	r18, r1
 d40:	31 05       	cpc	r19, r1
 d42:	a9 f5       	brne	.+106    	; 0xdae <__unpack_f+0x9e>
 d44:	41 15       	cp	r20, r1
 d46:	51 05       	cpc	r21, r1
 d48:	61 05       	cpc	r22, r1
 d4a:	71 05       	cpc	r23, r1
 d4c:	11 f4       	brne	.+4      	; 0xd52 <__unpack_f+0x42>
 d4e:	82 e0       	ldi	r24, 0x02	; 2
 d50:	37 c0       	rjmp	.+110    	; 0xdc0 <__unpack_f+0xb0>
 d52:	82 e8       	ldi	r24, 0x82	; 130
 d54:	9f ef       	ldi	r25, 0xFF	; 255
 d56:	13 96       	adiw	r26, 0x03	; 3
 d58:	9c 93       	st	X, r25
 d5a:	8e 93       	st	-X, r24
 d5c:	12 97       	sbiw	r26, 0x02	; 2
 d5e:	9a 01       	movw	r18, r20
 d60:	ab 01       	movw	r20, r22
 d62:	67 e0       	ldi	r22, 0x07	; 7
 d64:	22 0f       	add	r18, r18
 d66:	33 1f       	adc	r19, r19
 d68:	44 1f       	adc	r20, r20
 d6a:	55 1f       	adc	r21, r21
 d6c:	6a 95       	dec	r22
 d6e:	d1 f7       	brne	.-12     	; 0xd64 <__unpack_f+0x54>
 d70:	83 e0       	ldi	r24, 0x03	; 3
 d72:	8c 93       	st	X, r24
 d74:	0d c0       	rjmp	.+26     	; 0xd90 <__unpack_f+0x80>
 d76:	22 0f       	add	r18, r18
 d78:	33 1f       	adc	r19, r19
 d7a:	44 1f       	adc	r20, r20
 d7c:	55 1f       	adc	r21, r21
 d7e:	12 96       	adiw	r26, 0x02	; 2
 d80:	8d 91       	ld	r24, X+
 d82:	9c 91       	ld	r25, X
 d84:	13 97       	sbiw	r26, 0x03	; 3
 d86:	01 97       	sbiw	r24, 0x01	; 1
 d88:	13 96       	adiw	r26, 0x03	; 3
 d8a:	9c 93       	st	X, r25
 d8c:	8e 93       	st	-X, r24
 d8e:	12 97       	sbiw	r26, 0x02	; 2
 d90:	20 30       	cpi	r18, 0x00	; 0
 d92:	80 e0       	ldi	r24, 0x00	; 0
 d94:	38 07       	cpc	r19, r24
 d96:	80 e0       	ldi	r24, 0x00	; 0
 d98:	48 07       	cpc	r20, r24
 d9a:	80 e4       	ldi	r24, 0x40	; 64
 d9c:	58 07       	cpc	r21, r24
 d9e:	58 f3       	brcs	.-42     	; 0xd76 <__unpack_f+0x66>
 da0:	14 96       	adiw	r26, 0x04	; 4
 da2:	2d 93       	st	X+, r18
 da4:	3d 93       	st	X+, r19
 da6:	4d 93       	st	X+, r20
 da8:	5c 93       	st	X, r21
 daa:	17 97       	sbiw	r26, 0x07	; 7
 dac:	08 95       	ret
 dae:	2f 3f       	cpi	r18, 0xFF	; 255
 db0:	31 05       	cpc	r19, r1
 db2:	79 f4       	brne	.+30     	; 0xdd2 <__unpack_f+0xc2>
 db4:	41 15       	cp	r20, r1
 db6:	51 05       	cpc	r21, r1
 db8:	61 05       	cpc	r22, r1
 dba:	71 05       	cpc	r23, r1
 dbc:	19 f4       	brne	.+6      	; 0xdc4 <__unpack_f+0xb4>
 dbe:	84 e0       	ldi	r24, 0x04	; 4
 dc0:	8c 93       	st	X, r24
 dc2:	08 95       	ret
 dc4:	64 ff       	sbrs	r22, 4
 dc6:	03 c0       	rjmp	.+6      	; 0xdce <__unpack_f+0xbe>
 dc8:	81 e0       	ldi	r24, 0x01	; 1
 dca:	8c 93       	st	X, r24
 dcc:	12 c0       	rjmp	.+36     	; 0xdf2 <__unpack_f+0xe2>
 dce:	1c 92       	st	X, r1
 dd0:	10 c0       	rjmp	.+32     	; 0xdf2 <__unpack_f+0xe2>
 dd2:	2f 57       	subi	r18, 0x7F	; 127
 dd4:	30 40       	sbci	r19, 0x00	; 0
 dd6:	13 96       	adiw	r26, 0x03	; 3
 dd8:	3c 93       	st	X, r19
 dda:	2e 93       	st	-X, r18
 ddc:	12 97       	sbiw	r26, 0x02	; 2
 dde:	83 e0       	ldi	r24, 0x03	; 3
 de0:	8c 93       	st	X, r24
 de2:	87 e0       	ldi	r24, 0x07	; 7
 de4:	44 0f       	add	r20, r20
 de6:	55 1f       	adc	r21, r21
 de8:	66 1f       	adc	r22, r22
 dea:	77 1f       	adc	r23, r23
 dec:	8a 95       	dec	r24
 dee:	d1 f7       	brne	.-12     	; 0xde4 <__unpack_f+0xd4>
 df0:	70 64       	ori	r23, 0x40	; 64
 df2:	14 96       	adiw	r26, 0x04	; 4
 df4:	4d 93       	st	X+, r20
 df6:	5d 93       	st	X+, r21
 df8:	6d 93       	st	X+, r22
 dfa:	7c 93       	st	X, r23
 dfc:	17 97       	sbiw	r26, 0x07	; 7
 dfe:	08 95       	ret

00000e00 <__prologue_saves__>:
 e00:	2f 92       	push	r2
 e02:	3f 92       	push	r3
 e04:	4f 92       	push	r4
 e06:	5f 92       	push	r5
 e08:	6f 92       	push	r6
 e0a:	7f 92       	push	r7
 e0c:	8f 92       	push	r8
 e0e:	9f 92       	push	r9
 e10:	af 92       	push	r10
 e12:	bf 92       	push	r11
 e14:	cf 92       	push	r12
 e16:	df 92       	push	r13
 e18:	ef 92       	push	r14
 e1a:	ff 92       	push	r15
 e1c:	0f 93       	push	r16
 e1e:	1f 93       	push	r17
 e20:	cf 93       	push	r28
 e22:	df 93       	push	r29
 e24:	cd b7       	in	r28, 0x3d	; 61
 e26:	de b7       	in	r29, 0x3e	; 62
 e28:	ca 1b       	sub	r28, r26
 e2a:	db 0b       	sbc	r29, r27
 e2c:	0f b6       	in	r0, 0x3f	; 63
 e2e:	f8 94       	cli
 e30:	de bf       	out	0x3e, r29	; 62
 e32:	0f be       	out	0x3f, r0	; 63
 e34:	cd bf       	out	0x3d, r28	; 61
 e36:	09 94       	ijmp

00000e38 <__epilogue_restores__>:
 e38:	2a 88       	ldd	r2, Y+18	; 0x12
 e3a:	39 88       	ldd	r3, Y+17	; 0x11
 e3c:	48 88       	ldd	r4, Y+16	; 0x10
 e3e:	5f 84       	ldd	r5, Y+15	; 0x0f
 e40:	6e 84       	ldd	r6, Y+14	; 0x0e
 e42:	7d 84       	ldd	r7, Y+13	; 0x0d
 e44:	8c 84       	ldd	r8, Y+12	; 0x0c
 e46:	9b 84       	ldd	r9, Y+11	; 0x0b
 e48:	aa 84       	ldd	r10, Y+10	; 0x0a
 e4a:	b9 84       	ldd	r11, Y+9	; 0x09
 e4c:	c8 84       	ldd	r12, Y+8	; 0x08
 e4e:	df 80       	ldd	r13, Y+7	; 0x07
 e50:	ee 80       	ldd	r14, Y+6	; 0x06
 e52:	fd 80       	ldd	r15, Y+5	; 0x05
 e54:	0c 81       	ldd	r16, Y+4	; 0x04
 e56:	1b 81       	ldd	r17, Y+3	; 0x03
 e58:	aa 81       	ldd	r26, Y+2	; 0x02
 e5a:	b9 81       	ldd	r27, Y+1	; 0x01
 e5c:	ce 0f       	add	r28, r30
 e5e:	d1 1d       	adc	r29, r1
 e60:	0f b6       	in	r0, 0x3f	; 63
 e62:	f8 94       	cli
 e64:	de bf       	out	0x3e, r29	; 62
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	cd bf       	out	0x3d, r28	; 61
 e6a:	ed 01       	movw	r28, r26
 e6c:	08 95       	ret

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
